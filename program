import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext, ttk
import os
import subprocess
from threading import Thread

def update_progressbar(progressbar, total, current):
    progress = (current / total) * 100
    progressbar['value'] = progress
    root.update_idletasks()

def is_temporary_file(file_name):
    # 检查文件名是否看起来像一个临时文件
    return file_name.startswith('~$') or file_name.startswith('.~')

def is_small_image(file_path):
    # 检查文件是否是小于50KB的图像文件
    if file_path.endswith(('.jpg', '.jpeg', '.png')):
        return os.path.getsize(file_path) < 50 * 1024  # 50KB以下
    return False

def compress_files(password, folder_selected, progressbar):
    files_to_process = []
    for root, dirs, files in os.walk(folder_selected):
        for file in files:
            if (file.endswith(('.doc', '.docx', '.xls', '.xlsx', '.pdf', '.jpg', '.png', '.jpeg'))
                and not is_temporary_file(file) and not is_small_image(os.path.join(root, file))):
                files_to_process.append(os.path.join(root, file))
    total_files = len(files_to_process)
    processed_files = 0
    for file_path in files_to_process:
        archive_path = f"{file_path}.7z"
        result = subprocess.run([r"C:\Program Files\7-Zip\7z.exe", 'a', '-p' + password, '-y', archive_path, file_path], capture_output=True, text=True)
        processed_files += 1
        update_progressbar(progressbar, total_files, processed_files)
        if result.returncode != 0:
            text_area.insert(tk.END, f"无法压缩文件（可能被占用）：{file_path}\n")
            continue  # 跳过当前文件，继续下一个
        text_area.insert(tk.END, f"压缩并删除了文件：{file_path}\n")
        os.remove(file_path)

def compress_button_action():
    password = password_entry.get()
    if not password:
        messagebox.showerror("错误", "请输入密码！")
        return
    folder_selected = filedialog.askdirectory()
    if folder_selected:
        Thread(target=lambda: compress_files(password, folder_selected, progressbar)).start()

def decompress_files(password, folder_selected, progressbar):
    files_to_process = []
    for root, dirs, files in os.walk(folder_selected):
        for file in files:
            if file.endswith('.7z'):
                files_to_process.append(os.path.join(root, file))
    total_files = len(files_to_process)
    processed_files = 0
    for file_path in files_to_process:
        result = subprocess.run([r"C:\Program Files\7-Zip\7z.exe", 'e', '-p' + password, '-y', '-o' + os.path.dirname(file_path), file_path], capture_output=True, text=True)
        processed_files += 1
        update_progressbar(progressbar, total_files, processed_files)
        if result.returncode != 0:
            text_area.insert(tk.END, f"无法解压文件（可能密码错误或文件被占用）：{file_path}\n")
            continue  # 跳过当前文件，继续下一个
        text_area.insert(tk.END, f"解压了文件：{file_path}\n")

def decompress_button_action():
    password = password_entry.get()
    if not password:
        messagebox.showerror("错误", "请输入密码！")
        return
    folder_selected = filedialog.askdirectory()
    if folder_selected:
        Thread(target=lambda: decompress_files(password, folder_selected, progressbar)).start()

def display_initial_files():
    current_directory = os.getcwd()
    for root, dirs, files in os.walk(current_directory):
        for file in files:
            file_path = os.path.join(root, file)
            if (file.endswith(('.doc', '.docx', '.xls', '.xlsx', '.pdf', '.jpg', '.png', '.jpeg'))
                and not is_temporary_file(file) and not is_small_image(file_path)):
                text_area.insert(tk.END, f"{file_path}\n")

# 创建主窗口
root = tk.Tk()
root.title("文件压缩与解压工具")
root.geometry("600x450")

# 密码输入
tk.Label(root, text="密码：").pack(pady=(20,0))
password_entry = tk.Entry(root, show="*")
password_entry.pack(pady=(0,20))

# 压缩和解压按钮
compress_button = tk.Button(root, text="选择文件夹并压缩", command=compress_button_action)
compress_button.pack()

decompress_button = tk.Button(root, text="选择文件夹并解压", command=decompress_button_action)
decompress_button.pack(pady=10)

# 进度条
progressbar = ttk.Progressbar(root, orient=tk.HORIZONTAL, length=300, mode='determinate')
progressbar.pack(pady=10)

# 日志区域
text_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=70, height=20)
text_area.pack(padx=10, pady=10)

# 程序启动时显示当前目录下符合条件的文件
display_initial_files()

root.mainloop()
